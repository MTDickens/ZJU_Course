40单选1.5分
5填空2分
4计算30分

要结合平时实验 研究报告 对源代码的理解
文件控制块 进程控制块 磁盘分配方法 操作命令 内核编译过程 
inode task_structure 内核编译命令 10-20分

第二章主要是系统调用：
系统调用相关内容：
系统调用和API的逻辑关系
系统调用是内核函数，对其的调用和封装是库函数，最终会被应用程序调用
哪些属于系统调用哪些不属于
与库函数的区别
参数如何传递（三种方法）寄存器，内存，堆栈
哪些操作（进程控制，文件管理，设备管理，信息维护，通信方面）属于系统调用和系统调用有关

第三章：
进程状态迁移（什么样情况下会在状态间做迁移）
PCB数据结构 代码，主要字段代表的含义，相关定义，一些属性含有哪些信息
task_structure结构体中的主要属性代表什么意思
进程调度过程中上下文切换的含义，要做什么（save state,load new state)，切换过程中主要的成本
进程的创建过程 (fork的调用方法，fork的返回值)，子进程父进程共享了什么，什么是不一样的
哪几种情况会产生进程中止 子进程和父进程的中止顺序

第四章：
线程概念，特点是什么，和进程的区别是什么（定义-本身独有特点）
线程和进程之间什么共享，什么独立。轻量在哪里，什么独有什么共享。
线程实现里面：用户级线程有哪些定义（不依赖OS核心，内核不了解，利用线程库进行创建，有哪些）
内核级线程有哪些
内核和用户有多种组合方式（多对一，一对一，多对多）

第五章：调度
有不少计算类题目
对名词要看的快 burst time,IO burst,CPU burst等等
最基本的概念，过程，原因。
进程是如何在各种状态切换，哪种切换方法更好。
FCFS，SJF，Priority等算法，甘特图画法，指标计算
AWT等该怎么算

第六章：进程同步（核心信号量）
进程共享一些东西的时候需要同步。
比较难的题，主要要理解同步产生的原因（比如临界区问题，把共享读写数据定义为临界区，临界区往往会有互斥、空闲让进、有限等待等几个需要满足的条件）（不一致性现象：不同时间点执行同一个程序的结果不可预测，是由于多个进程对同一块数据进行操作）
解决方法主要是信号量：
信号量的定义、操作（wait,signal），对操作的要求（这个过程中保证原子操作）（pv,wait signal,down up操作）
操作的变种，有些处于忙等待状态。
信号量用法有几个最重要的作用：保证执行的顺序关系（什么进程限制性）（信号量保证的初始值决定了顺序）；信号量保证了互斥
信号量副作用：死锁
代码，读代码要掌握

第七章：死锁
死锁的产生（四个必要条件，互斥，hold and wait，不可抢占，循环等待），打破必要条件可以解除死锁。
死锁预防死锁避免：让系统不进入死锁状态，理解解释，这两个方法负担很重，需要定时检测。
死锁检测死锁接触：可进入死锁且容易恢复。

第八章：存储
内存相关
内存有两个地址空间：程序里用的，逻辑地址空间，对应逻辑内存，虚拟概念。
还有真实的物理内存。程序写的时候有个试图，看到的是逻辑内存空间。要理解两者区别
连续分配：如何把物理的内存空间分配给进程，对虚拟的来讲永远是连续的。把连续的空间分为两部分，一部分放操作系统，一部分放用户进程。用户进程申请空间就在用户进程位置里面找大于等于其大小的连续空间。
两大类：1.在内部分为几个连续固定分区，分区大小有大有小 2.动态分区法，切出来需要的内存
连续分配的确定，有两种碎片产生（internal,external fragment）internal分配后有些变量被释放，external是在分配后总有空闲空间很小又无法插入进程。
外部碎片处理：压缩和拼接和过程
核心内容：分页机制
连续内存分配浪费空间，本质上把内存分为一个个固定大小的块，对逻辑内存也进行分割成同样固定大小。物理内存叫frame,logical叫page。逻辑中是联系的物理上是离散的。每一块都会被进程使用，不会出现外部碎片。
Page table是产生二者映射关系的最终要的数据结构。分页机制的模型需要了解。
做映射关系需要进行地址转换，需要会算。4K代表地址中后12位要作为偏移量，地址中还要又page number，和offset等拼起来可以用来找内存位置。给个地址需要知道位置。
加TLB也很重要：快速访问硬件，做page number 和frame number的对应关系，如果hit了直接和offset拼出地址，是并发结构（并行查找）。
命中过程的计算方法（EAT），计算有效的访问时间。
Pagetable中有些位是用来保护的， valid-invalid bit，valid代表逻辑页号是否用到。
两级分页：外层和内层的页表，空间会被扩大为多少，会有几次的内存访问。

分段：是变化大小的。每个段和逻辑单元有关，大小不同，并非连续。有相应的段表，该有哪些相关的值，有效位，权限。
如何操作：短号来了，在段表中找到项，拿base 和offset拼起来（没听清楚）


第九章：
程序用虚拟的内存地址，可能叠加起来大于物理内存空间。
核心思想：给每个进程分配一定内存空间，并不一定完全满足，剩下的内容放入磁盘，有需要调入内存。
哪些内容应被放入内存。有几个原理（时间局部性原理：刚刚访问过的会被再次访问  空间局部性原理：地址空间上相邻的指令被连续访问的可能性更大）
在物理内存和磁盘之间换入换出的能力应该符合要求。
按需调页（demand pages）:需要的时候从磁盘调入memory,方法有几种：连续磁盘调用（把连续几块换入或换出），page table此时的作用，有对应的page对frame，valid表示哪些在内存，哪些在磁盘。
页表相关的数据结构： page table可以看一下。
缺页（page fault）：可因为两种情况产生：非法地址访问，数据在磁盘上。
缺页处理的过程：若发现指令使用的数据内容在磁盘，产生缺页中断，从磁盘中调用内容，更新数据结构，最终restart。
如何计算performence
页面置换：页调进来的过程中若内存满了，则需要replacement（页置换）。
很核心的置换算法：FIFO，OPTIMAL,SECONDCHANCE，LRU等置换算法，要了解且要会算。要知道算法的指标，哪些好。

第十章：文件系统相关
不记得有
文件命令



第十一章：
文件吸引同的定义需要了解
文件系统的数据结构，文件控制块，在Linux中的源代码，inode相关东西要看
文件系统在内存中的数据结构有哪些，分区表，目录结构，system的open file table, process的 open file table
虚拟文件系统：屏蔽底层对上提供接口
整个磁盘的分配方法：为文件分配磁盘空间：连续分配，链接分配，索引分配方法，分别是怎么做得。
连续分配扩展麻烦（需要移动，成本很高），基于扩展的连续分配，需要维护连接索引，能把块连在一起。
链使分配方法：块最后留空间指向下一块。链式索引FAT，文件分配表。
索引分配：比较重要，index表（也是个块）记录了文件需要的磁盘上相应数据块。
索引不够可以用链使索引。
还有二级索引，三级索引，混合型索引（很重要，linux文件系统中是混合型的，有12个直接索引（一个块4K，48K以内可以用直接索引）一定一级索引（可能1024个），二级索引）


十二章：
掌握且会算寻址寻道的算法。不同的方法算法。
算出移动距离。Look,SCAN的区别，结论。
启动块的作用，rom中什么样，磁盘里什么样，启动操作系统的过程。
不同种类的RAID，的定义。

第十三章：IO
IO主要掌握IO的几种方式，轮询方式，CPU如何，几种情况，calling 方式，busy wait的情况（忙等），interrup中断（非常重要！！）通过打断CPU进行终端处理程序，通过中断向量传递信息。
DMA让IO的访问和内存之间有直接访问方式，不过CPU，需要控制器。流程如何。

三块：
进程，内存，磁盘。


补充：
操作系统内核结构演变:simple-layer-单宏-微
进程创建和线程创建的使用方式 fork thread_create等代码，共用什么返回什么。
内存管理:几个例子：intel奔腾系列的内存管理，如何使用分页机制和分段机制的组合。用分段变线性，分页变物理地址。包括linear address的定义。分页机制中有两层分页，前一层有page directory。奔腾前十六页做page directory，10页做page,剩下做offset。这个例子在第八章的main memory中。
文件系统：熟悉关于linux系统的文件系统的例子，ext2/ext3这样类型的文件系统如何将直接索引，一级间接索引，二级，三级结合，如何进行计算。再强调。计算方法和page相近，最关键的要知道有多少直接索引块（比如十二个），一级间接索引要对应每一个基本块的大小（一般4K大小），一个索引4个byte，共1K个索引。当一个文件多大的时候要用到哪一级的索引。
内存：虚拟内存中thrashing，产生的原因是如果使用虚拟内存有按需调页的机制，需要的时候从磁盘中调页入内存。如果一个进程没有被分配足够的页，会经常产生page fault。会产生页的调入调出，导致中断，CPU利用率低，误导操作系统认为任务的并发性不足，会提高并发程度，任务更多，内存总量不变，单个进程分配的内存更少，产生恶性循环。产生thrashing，导致CPU性能极大下降。
如何控制multiprograming，控制进程数量，并根据局部性原理给进程分配内存大小。需要working set model（工作集）。这个知识点小，需要再关注。
比较重要：信号量，用两种方式。第一种用互斥性保证临界区，保护进程同步问题。第二种用来控制执行顺序。三个点：初始值应该设为什么（当其的值是多少的时候代表什么意思，变为其他的时候代表什么意思），wait函数应该用在哪里，signal函数应该用在哪里。会用信号量写程序，代码要看熟，考试不会一样，要会变化。


操作系统内核结构
进程创建和线程创建的使用方式 fork thread等代码，共用什么返回什么。




















































